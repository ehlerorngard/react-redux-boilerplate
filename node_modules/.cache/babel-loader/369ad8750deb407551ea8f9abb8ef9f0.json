{"ast":null,"code":"import \"./potatoActions.js\";\nimport requester from \"../../utils/requester.js\"; // SUBSCRIBE TO STATE???\n\nvar state = {}; // STORE.potato ????\n\nvar potatoInitalState = {};\nexport default function potatoReducer(state, action) {\n  switch (action.type) {\n    case PEEL_THE_POTATO:\n      return Object.assign({}, state, action.payload);\n    // <–– return new state\n\n    case DO_SOMETHING:\n      return Object.assign({}, state, action.payload);\n\n    case REQ_TO_DATABASE:\n      requester.editPotato(action.payload.id, action.payload.WHATEVER);\n      return Object.assign({}, state, action.payload);\n\n    default:\n      return state;\n  }\n} // TESING\n\nexport function onSuccessFunction(res) {\n  console.log(\"onSuccessFunction Res:\", res);\n}","map":{"version":3,"sources":["/Users/ehlerorngard/Documents/code/web/orngard.com/orngard/frontend/src/applications/Wedding/components/potato/potatoReducer.js"],"names":["requester","state","potatoInitalState","potatoReducer","action","type","PEEL_THE_POTATO","Object","assign","payload","DO_SOMETHING","REQ_TO_DATABASE","editPotato","id","WHATEVER","onSuccessFunction","res","console","log"],"mappings":"AAAA,OAAO,oBAAP;AACA,OAAOA,SAAP,MAAsB,0BAAtB,C,CAEA;;AACA,IAAMC,KAAK,GAAG,EAAd,C,CAAiB;;AAEjB,IAAMC,iBAAiB,GAAG,EAA1B;AAEA,eAAe,SAASC,aAAT,CAAuBF,KAAvB,EAA8BG,MAA9B,EAAsC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,eAAL;AACE,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyBG,MAAM,CAACK,OAAhC,CAAP;AAAiD;;AACnD,SAAKC,YAAL;AACE,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyBG,MAAM,CAACK,OAAhC,CAAP;;AACF,SAAKE,eAAL;AACCX,MAAAA,SAAS,CAACY,UAAV,CAAqBR,MAAM,CAACK,OAAP,CAAeI,EAApC,EAAwCT,MAAM,CAACK,OAAP,CAAeK,QAAvD;AACC,aAAOP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyBG,MAAM,CAACK,OAAhC,CAAP;;AACF;AACE,aAAOR,KAAP;AATJ;AAWD,C,CAED;;AACA,OAAO,SAASc,iBAAT,CAA2BC,GAA3B,EAAgC;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,GAAtC;AACA","sourcesContent":["import \"./potatoActions.js\";\nimport requester from \"../../utils/requester.js\";\n\n// SUBSCRIBE TO STATE???\nconst state = {} // STORE.potato ????\n\nconst potatoInitalState = {};\n\nexport default function potatoReducer(state, action) {\n  switch (action.type) {\n    case PEEL_THE_POTATO:\n      return Object.assign({}, state, action.payload)  // <–– return new state\n    case DO_SOMETHING:\n      return Object.assign({}, state, action.payload)\n    case REQ_TO_DATABASE:\n    \trequester.editPotato(action.payload.id, action.payload.WHATEVER);\n      return Object.assign({}, state, action.payload)\n    default:\n      return state;\n  }\n}\n\n// TESING\nexport function onSuccessFunction(res) {\n\tconsole.log(\"onSuccessFunction Res:\", res);\n}"]},"metadata":{},"sourceType":"module"}